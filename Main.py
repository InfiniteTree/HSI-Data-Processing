
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QDialog, QMainWindow, QApplication, QFileDialog, QGraphicsScene, QVBoxLayout, QGraphicsPixmapItem, QGraphicsView, QGraphicsRectItem, QGraphicsPathItem, QLabel, QProgressBar
from PyQt5.QtGui import QPixmap, QImage, QPainter, QColor, QPen, QPainterPath
from PyQt5.QtCore import Qt, QRectF, pyqtSignal, QPointF, QTimer, QThread

import sys
import os
import subprocess
import numpy as np
import matplotlib.pyplot as plt
#import threading
import shutil
from MainWindow import Ui_MainWindow

import HSIpack

class Main(QMainWindow, Ui_MainWindow):
    settings = QtCore.QSettings("config.ini",
                            QtCore.QSettings.Format.IniFormat)
    
    ######----------------------------------------------------------------------------------------------------######
    #####----------------------------------Parameters definition start here------------------------------------#####
    ####--------------------------------------------------------------------------------------------------------####
    # ------------------------------------Tab1------------------------------------
    fileNum = 0
    fileName = "" # The filename of the HSI
    selected_directory = "" # The abs path of the raw spe file directory
    # in Windows: C:\...\... while in linux C:/.../...
    
    # Single file
    rawSpeFile_path = "" # The abs path of the raw spe file
    rawHdrFile_path = "" # The abs path of the raw hdr file
    rawsSpeFile_path = "" # The abs path of the raw spe files
    rawsHdrFile_path = "" # The abs path of the raw hdr files
    BRFSpeFile_path = "" # The abs path of the reference board spe file
    BRFHdrFile_path = "" # The abs path of the reference board hdr file

    # Multiple files
    rawfile_paths = "" # The abs path of the raw spe files with batch processing
    multiFlag = 0 # multiple files flag: 0 indicates not multiple while 1 indicates multiple

    # Data recording for selection rectangular
    raw_scene = None
    dealt_scene = None
    color_scene = None

    selecting = False
    selection_rect = None
    selection_start = None
    selection_end = None

    BRF3_pos_range = [] # [BRF3%] [[3_x0,3_y0],[3_x1,3_y1]]
    BRF30_pos_range = [] # [BRF30%] [[30_x0,30_y0],[30_x1,30_y1]]

    # Data for single Hyperspectra image
    raw_HSI_info = []
    HSI_lines = 0 # Default length value
    HSI_samples = 0 # Default width value
    HSI_channels = 300 # Default wavelength value
    HSI = [[[]]] # 3-D HSI img
    HSI_wavelengths = [] # ranging from apporximately 400nm to 1000nm
    pixNum = 0 # number of the pix of the whole photo

    # Data for reference board image
    BRF_HSI_info = []

    # select Refboard rect flag; 0 indicates not selected while 1 indicated selected
    selectFlag_1 = 0
    selectFlag_2 = 0

    # rbg Image generated by the three bands of HSI
    rgbImg = []

    # ------------------------------------Tab2------------------------------------
    # NDVI_matrix
    NDVI = []

    # Threshold value by set at the Tab2 
    NDVI_TH_LOW = -1 # Threshold value of NDVI to seperate the plant from the background
    NDVI_TH_HIGH = 1 # Threshold value of NDVI to seperate the plant from the background
    ampl_LowTH = 0  # Threshold value of amplititude of the hyperspectra to eliminate
    ampl_HighTH = 4095  # Threshold value of amplititude of the hyperspectra to eliminate

    BRFfile_paths = [] # ["3%BRF_filename", "30%BRF_filename"]

    # The proportion is initially set as 1
    cur_proportion = 1

    # class reflect
    reflect = None
    k = []
    b = []
    
    l1_rgbimg_path = "" # level 1 img rgb file path
    l2_rgbimg_path = "" # level 2 img rgb file path

    plant_mask = [] # bool value mask for the plant: True implies a non-plant pixel while False implies a plant pixel
    plantPixNum = 0 # the number of the plant pixels

    # ------------------------------------Tab3------------------------------------
    Hs_Para = ""
    Ptsths_Para = ""
    Ptsths_Para_Model = ""
    ptColorMapType = ""
    hsColorMapType = ""

    pro_data = None

    Hs_Para_list = ["NDVI","OSAVI", "PSSRa","PSSRb", "PRI","MTVI2","SR", "DVI", "SIPI", "PSRI", "CRI1", "CRI2", "ARI1", "ARI2", "WBI"]
    Ptsths_Para_list = ["SPAD","A1200", "N", "Ca", "Cb"]

    # Default Value for Hs and Pt parameter range
    PtMin = 0
    PtMax = 1
    HspMin = 0
    HspMax = 1


    ###-------------------------------------------The End line---------------------------------------------------###


    ######----------------------------------------------------------------------------------------------------######
    #####-------------------------------------_init_ Function start here---------------------------------------#####
    ####--------------------------------------------------------------------------------------------------------####
    def __init__(self, QMainWindow):
        QMainWindow.__init__(self)
        Ui_MainWindow.__init__(self)
        self.setupUi(self)

        self.previousPage = None

        # ------------------------------------Tab1------------------------------------
        # Part 1. Raw Data Processing
        # Import the BRF HSI files
        self.impBRFImgBtn.clicked.connect(self.importBRFImg)
        
        # Mouse box selection for 3% board
        self.selectBox3Btn.clicked.connect(lambda: self.selectBox("3"))

        # Mouse box selection for 30% board
        self.selectBox30Btn.clicked.connect(lambda: self.selectBox("30"))

        # Get k and b of the reflectance equation
        self.importRftCaliFileBtn.clicked.connect(self.importRftCaliFile)
        self.RefCaliBtn.clicked.connect(self.RefCali)

        # Import the single raw HSI file
        self.impRawBtn.clicked.connect(self.importRaw)
        self.impRawBtn.setGeometry(50, 50, 200, 30) 

        # Read the raw file
        self.rgbGeneBtn.clicked.connect(lambda:self.getRgb("Gene"))
        # show the raw file
        self.rgbViewBtn.clicked.connect(lambda:self.getRgb("View"))
        # Save the raw rgb file
        self.rgbSaveBtn.clicked.connect(lambda:self.getRgb("Save"))

        # Read the raw BRF file
        self.BRFRawGeneBtn.clicked.connect(lambda:self.getBRFRgb("Gene"))
        # show the raw BRF file
        self.BRFRawViewBtn.clicked.connect(lambda:self.getBRFRgb("View"))
        # Save the raw BRF file
        self.BRFRawSaveBtn.clicked.connect(lambda:self.getBRFRgb("Save"))

        # Show the hsi information
        self.showHsiInfoBtn.clicked.connect(self.showHsiInfo)
        
        # Draw the hyperspectra curve
        self.HSCurveBtn.clicked.connect(self.HSCurveView)

        # ------------------------------------Tab2------------------------------------
        # Part 2. Data Pre-processing
        self.NDVI_TH_HIGH = float(self.bgNdviHighDb.currentText())
        self.NDVI_TH_LOW = float(self.bgNdviLowDb.currentText())
        self.ampl_LowTH = int(self.amplLowThDb.currentText())
        self.ampl_HighTH = int(self.amplHighThDb.currentText())
        self.numOfAvg = int(self.numOfAvgDb.currentText())

        # Handle Selection Changed
        self.numOfAvgDb.currentIndexChanged.connect(lambda: self.getPreProcessPara(0))
        self.bgNdviHighDb.currentIndexChanged.connect(lambda: self.getPreProcessPara(1))
        self.bgNdviLowDb.currentIndexChanged.connect(lambda: self.getPreProcessPara(2))
        self.amplLowThDb.currentIndexChanged.connect(lambda: self.getPreProcessPara(3))
        self.amplHighThDb.currentIndexChanged.connect(lambda: self.getPreProcessPara(4))

        # Level 1-3 pre-processing
        # Spectral averaging 
        self.HSIAvgGeneBtn.clicked.connect(lambda: self.HSIAvg(1))
        self.HSIAvgSaveBtn.clicked.connect(lambda: self.HSIAvg(2))
        self.HSIAvgViewBtn.clicked.connect(lambda: self.HSIAvg(3))
        
        # Remove background by NDVI
        self.RmBgGeneBtn.clicked.connect(lambda: self.RmBg("Gene"))
        self.RmBgViewBtn.clicked.connect(lambda: self.RmBg("View"))
        self.RmBgSaveBtn.clicked.connect(lambda: self.RmBg("Save"))

        # Remove dark and brigth by amplititudes
        self.RmDbGeneBtn.clicked.connect(lambda: self.RmDb("Gene"))
        self.RmDbViewBtn.clicked.connect(lambda: self.RmDb("View"))
        self.RmDbSaveBtn.clicked.connect(lambda: self.RmDb("Save"))

        # Get the reflectance
        self.RefGeneBtn.clicked.connect(lambda: self.getReflect("Gene"))
        self.RefViewBtn.clicked.connect(lambda: self.getReflect("View"))
        self.RefSaveBtn.clicked.connect(lambda: self.getReflect("Save"))

        self.reflectShowBtn.clicked.connect(self.reflectShow)

        # Draw the reflectance curve
        self.RFCurveBtn.clicked.connect(self.RFCurveView)

        # ------------------------------------Tab3------------------------------------
        # Get the current text in the drab bar
        self.HS_Para = self.hsParaDb.currentText()
        self.Ptsths_Para = self.ptsthsParaDb.currentText()
        self.Ptsths_Para_Model = self.ptsthsParaModelDb.currentText()
        self.ptColorMapType = self.ptColorMapDb.currentText()
        self.hsColorMapType = self.hsColorMapDb.currentText()

        # Get the changed text in the drab bar
        self.hsParaDb.currentIndexChanged.connect(lambda: self.getProcessPara(1))
        self.ptsthsParaDb.currentIndexChanged.connect(lambda: self.getProcessPara(2))
        self.ptsthsParaModelDb.currentIndexChanged.connect(lambda: self.getProcessPara(3))

        self.hsColorMapDb.currentIndexChanged.connect(lambda: self.getColorMapType(1))
        self.ptColorMapDb.currentIndexChanged.connect(lambda: self.getColorMapType(2))
        
        # HS Parameters
        self.hsParaGeneBtn.clicked.connect(lambda: self.getHsPara("Gene"))
        self.hsParaSaveBtn.clicked.connect(lambda: self.getHsPara("Save"))
        self.hsParaViewBtn.clicked.connect(lambda: self.getHsPara("View"))
        
        # Plant Phenotypic Parameters
        self.ptsthsGeneBtn.clicked.connect(lambda: self.getPtsthsPara("Gene"))
        self.ptsthsSaveBtn.clicked.connect(lambda: self.getPtsthsPara("Save"))
        self.ptsthsViewBtn.clicked.connect(lambda: self.getPtsthsPara("View"))

        self.AvgHsParaGeneBtn.clicked.connect(lambda: self.outputAvgHsParas("Gene",1))
        self.AvgPtsthsParaGeneBtn.clicked.connect(lambda: self.outputAvgPtsthsParas("Gene",1))

        # One-click processing for multiples file 
        # Import the multiples raw HSI files
        self.impRawsBtn.clicked.connect(self.importRaws)

        # Multiple raw datas generating
        self.multiGeneBtn.clicked.connect(lambda:self.multiProcess("Gene"))
        self.multiViewBtn.clicked.connect(lambda:self.multiProcess("View"))
        self.multiDeleteBtn.clicked.connect(self.multiDelete)

    ######----------------------------------------------------------------------------------------------------######
    #####-------------------------------------Helper Function start here---------------------------------------#####
    ####--------------------------------------------------------------------------------------------------------####
    # -------------------------------------Tab1-------------------------------------
    def importRaw(self):
        file_dialog = QFileDialog()
        selected_file, _ = file_dialog.getOpenFileName(QMainWindow(), '选择文件', '', '.spe(*.spe*)')
        if selected_file:
            self.rawSpeFile_path = selected_file
            self.rawSpeFile_path = self.rawSpeFile_path.replace("\\","/")
            self.rawHSIPathlineEdit.setText(self.rawSpeFile_path)
            self.rawHdrFile_path = self.rawSpeFile_path.replace(".spe",".hdr")
            self.fileNum = 1
        
    # import the image that contains the Reference Board
    def importBRFImg(self):
        selected_file, _ = QFileDialog.getOpenFileName(QMainWindow(), '选择文件', '', '.spe(*.spe*)')
        if selected_file:
            self.BRFSpeFile_path = selected_file
            self.BRFSpeFile_path = self.BRFSpeFile_path.replace("\\","/")
            self.BRFPathlineEdit.setText(self.BRFSpeFile_path)            
            self.BRFHdrFile_path = self.BRFSpeFile_path.replace(".spe",".hdr")
            if self.fileNum == 0: # Allow to upload multiple first
                self.fileNum = 1

    # import the amplititude along diferent wavelengths of 3% and 30% BRF
    def importRftCaliFile(self):
        file_dialog = QFileDialog()
        self.selected_directory = file_dialog.getExistingDirectory(self, "选择文件夹")
        if self.selected_directory:
            BRFfile_names = os.listdir(self.selected_directory)
            BRFfile_names = [item.replace("\\","/") for item in BRFfile_names]
            self.selected_directory = self.selected_directory.replace("\\","/")
            self.BRFCaliPathlineEdit.setText(self.selected_directory)
            
            self.BRFfile_paths = [self.selected_directory + "/" + item for item in BRFfile_names]

    def RefCali(self):
        self.reflect = HSIpack.gr.Reflectance(self.HSI_info, self.cur_proportion, [self.BRF3_pos_range, self.BRF30_pos_range], self.BRFfile_paths, [], [], self.plant_mask, self.fileName)
        # Get the k and b
        self.k, self.b = self.reflect.getReflectEquation()
        # Unlock the view and Save function
        QtWidgets.QMessageBox.about(self, "", "反射板校准已就绪")


    def getRgb(self, function):
        match function:
            case "Gene":
                self.HSI_info = HSIpack.rd.ReadData(self.rawHdrFile_path,self.rawSpeFile_path, 1)
                self.HSI_lines = self.HSI_info[0]
                self.HSI_channels = self.HSI_info[1]
                self.HSI_samples = self.HSI_info[2]
                self.HSI = self.HSI_info[3]
                self.HSI_wavelengths = self.HSI_info[4]
                self.plant_mask = np.zeros((self.HSI_lines, self.HSI_samples), dtype=bool)
                self.cur_proportion = 1
                self.pixNum = self.HSI_lines * self.HSI_samples
                # Week amplititude detection
                if np.max(self.HSI) < 1000:
                    QtWidgets.QMessageBox.warning(self, "", "高光谱原始数据亮度值过低！请重新导入")
                    return
                
                index1 = self.rawSpeFile_path.rfind("/")  
                index2 = self.rawSpeFile_path.find(".", index1)
                self.fileName = self.rawSpeFile_path[index1+1: index2]
                

                # Unlock the view and Save function
                if self.fileNum == 1:
                    self.rgbSaveBtn.setEnabled(True)
                    self.rgbViewBtn.setEnabled(True)
                    self.showHsiInfoBtn.setEnabled(True)
                    QtWidgets.QMessageBox.about(self, "", "高光谱原始数据处理成功")

                elif self.fileNum > 1:
                    self.multiViewBtn.setEnabled(True)
                    
            
            case "Save":
                if self.rawSpeFile_path != "":
                    if not os.path.exists("Outputs/figures/"+ self.fileName):
                        os.makedirs("Outputs/figures/"+ self.fileName)
                    if not os.path.exists("Outputs/results/" + self.fileName):
                        os.makedirs("Outputs/results/" + self.fileName)
                    self.rgbImg = HSIpack.rd.drawImg(self.HSI_info)
                    self.rgbImg.save("Outputs/figures/" + self.fileName + "/raw.jpg")

                    if self.fileNum == 1:
                        QtWidgets.QMessageBox.about(self, "", "高光谱可视化数据保存成功")

            case "View":
                if self.rawSpeFile_path != "":                     
                    self.rawjpgFile_path = "Outputs/figures/" + self.fileName + "/raw.jpg"
                    frame = QImage(self.rawjpgFile_path)
                    pix = QPixmap.fromImage(frame)
                    item = QGraphicsPixmapItem(pix)
                    # the rgb scene in Tab1
                    self.raw_scene = QGraphicsScene()
                    self.raw_scene.addItem(item)
                    self.hsiRawViewBox.setScene(self.raw_scene)
                    # Make the graph self-adaptive to the canvas
                    # self.hsiRawViewBox.fitInView(self.raw_scene.sceneRect(), Qt.KeepAspectRatio)
                    self.HSCurveBtn.setEnabled(True)

    def getBRFRgb(self, function):
        match function:
            case "Gene":
                self.HSI_info = HSIpack.rd.ReadData(self.BRFHdrFile_path,self.BRFSpeFile_path, 1)
                self.HSI_lines = self.HSI_info[0]
                self.HSI_channels = self.HSI_info[1]
                self.HSI_samples = self.HSI_info[2]
                self.HSI = self.HSI_info[3]
                self.HSI_wavelengths= self.HSI_info[4]
                self.plant_mask = np.zeros((self.HSI_lines, self.HSI_samples), dtype=bool)
                self.cur_proportion = 1
                self.pixNum = self.HSI_lines * self.HSI_samples
                
                # Week amplititude detection
                if np.max(self.HSI) < 1000:
                    QtWidgets.QMessageBox.warning(self, "", "高光谱原始数据亮度值过低！请重新导入")
                    return

                index1 = self.rawSpeFile_path.rfind("/")  
                index2 = self.rawSpeFile_path.find(".", index1)
                self.fileName = self.rawSpeFile_path[index1+1: index2]


                # Unlock the view and Save function
                self.BRFRawViewBtn.setEnabled(True)
                self.BRFRawSaveBtn.setEnabled(True)
                self.showHsiInfoBtn.setEnabled(True)
                
                QtWidgets.QMessageBox.about(self, "", "高光谱反射板处理成功")

            case "Save":
                if self.BRFSpeFile_path != "":
                    self.rgbImg = HSIpack.rd.drawImg(self.HSI_info)
                    # Handle multiple files saving
                    if not os.path.exists("Outputs/figures/BRF"):
                        os.makedirs("Outputs/figures/BRF")
                    if not os.path.exists("Outputs/results/BRF"):
                        os.makedirs("Outputs/results/BRF")
                    self.rgbImg.save("Outputs/figures/BRF/rawBRF.jpg")

                    QtWidgets.QMessageBox.about(self, "", "高光谱反射板可视化保存成功")

            case "View":
                if self.BRFSpeFile_path != "":                     
                    self.rawjpgFile_path = "Outputs/figures/BRF/rawBRF.jpg"
                    frame = QImage(self.rawjpgFile_path)
                    pix = QPixmap.fromImage(frame)
                    item = QGraphicsPixmapItem(pix)
                    # the rgb scene in Tab1
                    self.raw_scene = QGraphicsScene()
                    self.raw_scene.addItem(item)
                    self.hsiRawViewBox.setScene(self.raw_scene)

                    # Unlock
                    self.selectBox3Btn.setEnabled(True)
                    self.selectBox30Btn.setEnabled(True)
                    self.HSCurveBtn.setEnabled(True)

    # Need to re select
    def selectBox(self, brf_flag):
        if brf_flag == "3" and self.selectFlag_1 == 0:
            self.view = hsiRawView(self.raw_scene, brf_flag)
            self.selectFlag_1 = 1
        if brf_flag == "30" and self.selectFlag_2 == 0:
            self.view = hsiRawView(self.raw_scene, brf_flag)
            self.selectFlag_2 = 1
        #self.setCentralWidget(self.view)
        self.view.show()
        self.view.resize(600, 800)
        #self.view.startSelection()
       
    def showHsiInfo(self):
        self.lenShowBtn.setText(str(self.HSI_lines)+" pix")
        self.widthShowBtn.setText(str(self.HSI_samples)+" pix")
        self.wlShowBtn.setText(str(self.HSI_channels)+" bands")
        
        self.wavesLayout = QVBoxLayout(self.wavesWidget)
        
        text = "图像具体波段"
        label = QLabel(text)
        label.setStyleSheet("border: none; font: 12pt 'Agency FB';") 
        self.wavesLayout.addWidget(label)

        for i in range(self.HSI_channels):
            text = "band " + str(i+1) + "------" + self.HSI_wavelengths[i] + " nm"
            label = QLabel(text)
            label.setStyleSheet("border: none; font: 12pt 'Times New Roman';") 
            self.wavesLayout.addWidget(label)
        self.WaveScrollArea.setWidgetResizable(True)
 
    # ------------------------------------Tab2------------------------------------
    def getPreProcessPara(self, index):
        combo_box = self.sender()
        match index:
            case 0:
                self.numOfAvg = int(self.numOfAvgDb.currentText())
            case 1:
                self.NDVI_TH_HIGH = float(combo_box.currentText())
            case 2:
                self.NDVI_TH_LOW = float(combo_box.currentText())
            case 3:
                self.ampl_LowTH = int(combo_box.currentText())
            case 4:
                self.ampl_HighTH = int(combo_box.currentText())
    
    def HSIAvg(self, index):
        match index:
            case 1:
                pre_data = HSIpack.pre.Preprocess(self.HSI_info, self.NDVI_TH_LOW, self.NDVI_TH_HIGH, self.ampl_LowTH, self.ampl_HighTH, self.cur_proportion, self.plant_mask)
                level0 = pre_data.getLevel0(self.numOfAvg)
                self.HSI = level0 # Change the HSI_info into the averaging
                self.HSI_info = [self.HSI_lines, self.HSI_channels, self.HSI_samples, self.HSI, self.HSI_wavelengths]
                self.HSIAvgSaveBtn.setEnabled(True)
                self.HSIAvgViewBtn.setEnabled(True)
                if self.fileNum == 1:
                    QtWidgets.QMessageBox.about(self, "", "光谱平均化处理成功")
            case 2:
                l0_rgbimg = HSIpack.rd.drawImg(self.HSI_info)
                self.l0_rgbimg_path = "Outputs/figures/"+ self.fileName + "/preprocess/level0.jpg"
                if not os.path.exists("Outputs/figures/"+ self.fileName + "/preprocess"):
                    os.makedirs("Outputs/figures/"+ self.fileName + "/preprocess")
                if not os.path.exists("Outputs/results/"+ self.fileName + "/preprocess"):
                    os.makedirs("Outputs/results/"+ self.fileName + "/preprocess")
                l0_rgbimg.save(self.l0_rgbimg_path)
                if self.fileNum == 1:
                    QtWidgets.QMessageBox.about(self, "", "光谱平均化结果保存成功")   
            case 3:
                frame = QImage(self.l0_rgbimg_path)
                pix = QPixmap.fromImage(frame)
                item = QGraphicsPixmapItem(pix)
                # the rgb scene in Tab1
                self.dealt_scene = QGraphicsScene()
                self.dealt_scene.addItem(item)
                self.hsidealtViewBox.setScene(self.dealt_scene)
            
    # Remove the background by NDVI
    def RmBg(self, function):
        match function:        
            case "Gene":
                pre_data = HSIpack.pre.Preprocess(self.HSI_info, self.NDVI_TH_LOW, self.NDVI_TH_HIGH, self.ampl_LowTH, self.ampl_HighTH, self.cur_proportion, self.plant_mask)
                level1 = pre_data.getLevel1()
                self.HSI_info = level1[0]
                self.cur_proportion = level1[2]
                self.NDVI = level1[3]
                level1_mask = level1[4]
                self.plant_mask = self.plant_mask | level1_mask
                self.plantPixNum = np.count_nonzero(~self.plant_mask)

                # Unlock the view and Save function
                self.RmBgViewBtn.setEnabled(True)
                self.RmBgSaveBtn.setEnabled(True)

                
                if self.fileNum == 1:
                    QtWidgets.QMessageBox.about(self, "", "去除非植物部分背景成功")
            
            case "Save":
                l1_rgbimg = HSIpack.rd.drawImg(self.HSI_info)
                self.l1_rgbimg_path = "Outputs/figures/"+ self.fileName + "/preprocess/level1.jpg"
                if not os.path.exists("Outputs/figures/"+ self.fileName + "/preprocess"):
                    os.makedirs("Outputs/figures/"+ self.fileName + "/preprocess")
                if not os.path.exists("Outputs/results/"+ self.fileName + "/preprocess"):
                    os.makedirs("Outputs/results/"+ self.fileName + "/preprocess")
                l1_rgbimg.save(self.l1_rgbimg_path)
                if self.fileNum == 1:
                    QtWidgets.QMessageBox.about(self, "", "可视化保存成功")
                
            case "View":
                frame = QImage(self.l1_rgbimg_path)
                pix = QPixmap.fromImage(frame)
                item = QGraphicsPixmapItem(pix)
                # the rgb scene in Tab1
                self.dealt_scene = QGraphicsScene()
                self.dealt_scene.addItem(item)
                self.hsidealtViewBox.setScene(self.dealt_scene)
                # Make the graph self-adaptive to the canvas
                #self.hsidealtView.fitInView(self.scene.sceneRect(), Qt.KeepAspectRatio)
                '''
                fig, ax = plt.subplots(figsize=(6, 8))
                im = ax.imshow(self.NDVI, cmap='gray',interpolation='nearest')
                ax.set_title("Pseudo_Color Map of the Relative Values on NDVI", y=1.05)
                fig.colorbar(im)
                plt.show()
                '''
                
    # Remove the too bright and to dark img
    def RmDb(self, function):
            # To remove the shadow and the bright of the plot
        match function:
            case "Gene":
                pre_data = HSIpack.pre.Preprocess(self.HSI_info, self.NDVI_TH_LOW, self.NDVI_TH_HIGH, self.ampl_LowTH, self.ampl_HighTH, self.cur_proportion, self.plant_mask)
                level2 = pre_data.getLevel2()
                self.HSI_info = level2[0]
                self.cur_proportion = level2[3]
                self.plantPixNum = self.cur_proportion * (self.pixNum)
                level2_mask = level2[2]                
                self.plant_mask = self.plant_mask | level2_mask
                
                # Unlock the view and Save function
                self.RmDbViewBtn.setEnabled(True)
                self.RmDbSaveBtn.setEnabled(True)
                if self.fileNum == 1:
                    QtWidgets.QMessageBox.about(self, "", "去除过暗过曝成功")

            case "Save":
                if not os.path.exists("Outputs/figures/"+ self.fileName + "/preprocess"):
                    os.makedirs("Outputs/figures/"+ self.fileName + "/preprocess")
                if not os.path.exists("Outputs/results/"+ self.fileName + "/preprocess"):
                    os.makedirs("Outputs/results/"+ self.fileName + "/preprocess")

                l2_rgbImg = HSIpack.rd.drawImg(self.HSI_info)
                self.l2_rgbimg_path = "Outputs/figures/"+ self.fileName + "/preprocess/level2.jpg"
                l2_rgbImg.save(self.l2_rgbimg_path)
                if self.fileNum == 1:
                    QtWidgets.QMessageBox.about(self, "", "可视化保存成功")

            case "View":
                frame = QImage(self.l2_rgbimg_path)
                pix = QPixmap.fromImage(frame)
                item = QGraphicsPixmapItem(pix)
                # the rgb scene in Tab1
                self.dealt_scene = QGraphicsScene()
                self.dealt_scene.addItem(item)
                self.hsidealtViewBox.setScene(self.dealt_scene)
    
    # Calculate the reflectance
    def getReflect(self, function):
        match function:        
            case "Gene":
                self.reflect = HSIpack.gr.Reflectance(self.HSI_info, self.cur_proportion, [self.BRF3_pos_range, self.BRF30_pos_range], self.BRFfile_paths, self.k, self.b, self.plant_mask, self.fileName)
                self.reflect.getReflect()
                # Unlock the view and Save function
                self.RefViewBtn.setEnabled(True)
                self.RefSaveBtn.setEnabled(True)
                self.RFCurveBtn.setEnabled(True)
                self.reflectShowBtn.setEnabled(True)
                if self.fileNum == 1:
                    QtWidgets.QMessageBox.about(self, "", "反射率校准处理成功")
           
            case "Save":
                self.reflect.visualizeReflect(1)
                if self.fileNum == 1:
                    QtWidgets.QMessageBox.about(self, "", "植物平均反射率曲线保存成功\n植物反射率彩图保存成功")
            
            case "View":
                self.reflect.visualizeReflect(0)

    def HSCurveView(self):
        self.view = HSCurve(self.raw_scene)
        self.view.show()

    def RFCurveView(self):
        #self.view = RFCurve(self.dealt_scene)
        self.view = RFCurve(self.raw_scene)
        self.view.show()

    def reflectShow(self):
        try:
            waveSelect = int(self.reflectWaveSelectLineEdit.text()) - 1 # use index 0 - 299 in the matrix operation
            self.reflectjpgFile_path = self.reflect.saveReflectJpg(self.fileName, waveSelect)
            frame = QImage(self.reflectjpgFile_path)
            pix = QPixmap.fromImage(frame)
            item = QGraphicsPixmapItem(pix)
            # the rgb scene in Tab2
            self.dealt_scene = QGraphicsScene()
            self.dealt_scene.addItem(item)
            self.hsidealtViewBox.setScene(self.dealt_scene)
            self.hsidealtViewBox.fitInView(self.dealt_scene.sceneRect(), Qt.KeepAspectRatio)
            message = "植物反射率在{}nm波段的彩图已显示".format(self.HSI_wavelengths[waveSelect])
            QtWidgets.QMessageBox.about(self, "", message)

        except:
            QtWidgets.QMessageBox.about(self, "", "请输入1-300之间的任意整数!")


    # ----------------------------Tab3-----------------------------
    def getProcessPara(self, index):
        combo_box = self.sender()
        match index:
            case 1:
                self.Hs_Para = combo_box.currentText()
            case 2:
                self.Ptsths_Para = combo_box.currentText()
            case 3:
                self.Ptsths_Para_Model = combo_box.currentText()
    
    def getColorMapType(self, index):
        combo_box = self.sender()
        match index:
            case 1:
                self.hsColorMapType = combo_box.currentText()
            case 2:
                self.ptColorMapType = combo_box.currentText()

    def getHsPara(self, function):
        match function:
            case "Gene":
                # change the non-plant pixel reflectance to 0 at all bands
                '''
                self.reflect.ReflectMatrix = np.transpose(self.reflect.ReflectMatrix, (0, 2, 1)) # exChange the second and the third dimension
                self.reflect.ReflectMatrix[~self.plant_mask,:] = 0
                self.reflect.ReflectMatrix = np.transpose(self.reflect.ReflectMatrix, (0, 2, 1))
                '''
                reflect_info = [self.HSI_lines, self.HSI_channels, self.HSI_samples, self.reflect.ReflectMatrix, self.HSI_wavelengths, self.cur_proportion]
                self.HS_Para = self.hsParaDb.currentText()
                try:
                    self.HspMin = float(self.HspMinInput.text())
                    self.HspMax = float(self.HspMaxInput.text())
                except:
                    pass

                self.pro_data = HSIpack.pro.Process(reflect_info, self.Hs_Para, self.Ptsths_Para, self.Ptsths_Para_Model, self.plant_mask, self.fileName, self.HspMin, self.HspMin)
                self.pro_data.calcHsParas()

                # Unlock the view and Save function
                self.hsParaSaveBtn.setEnabled(True)
                self.hsParaViewBtn.setEnabled(True)
                if self.fileNum == 1:
                    QtWidgets.QMessageBox.about(self, "", "光谱指数计算成功")

            case "Save":
                if not os.path.exists("Outputs/figures/" + self.fileName + "/process"):
                    os.makedirs("Outputs/figures/" + self.fileName + "/process")
                if not os.path.exists("Outputs/results/" + self.fileName + "/process"):
                    os.makedirs("Outputs/results/" + self.fileName + "/process")
                self.pro_data.draw_pseudoColorImg("Save", 1, self.hsColorMapType)
                if self.fileNum == 1:
                    QtWidgets.QMessageBox.about(self, "", "光谱指数计算结果保存成功")

            case "View":
                self.pro_data.draw_pseudoColorImg("View", 1, self.hsColorMapType)

    def getPtsthsPara(self, function):
        match function:
            case "Gene":
                try:
                    try:
                        self.PtMin = float(self.ptMinInput.text())
                        self.PtMax = float(self.ptMaxInput.text())
                    except:
                        pass

                    reflect_info = [self.HSI_lines, self.HSI_channels, self.HSI_samples, self.reflect.ReflectMatrix, self.HSI_wavelengths, self.cur_proportion]
                    self.pro_data = HSIpack.pro.Process(reflect_info, self.Hs_Para, self.Ptsths_Para, self.Ptsths_Para_Model, self.plant_mask, self.fileName, self.PtMin, self.PtMax)
                    for i in range(self.pixNum):
                        self.pro_data.CalcPhenotypeParas(i)
                    print("one figure processed successfully")
                    self.ptsthsSaveBtn.setEnabled(True)
                    self.ptsthsViewBtn.setEnabled(True)
                    if self.fileNum == 1:
                        message = "光合表型参数计算成功\n通过阈值设定滤除了{}个像素点:".format(self.pro_data.count)
                        QtWidgets.QMessageBox.about(self, "", message)

                except ValueError:
                    QtWidgets.QMessageBox.about(self, "", "请输入有效的阈值数字")

                '''
                self.progress_bar = QProgressBar(self)
                self.progress_bar.setGeometry(30, 40, 200, 25)
                self.progress_value = 0
                self.progress_bar.setValue(self.progress_value)

                self.timer = QTimer()
                self.timer.timeout.connect(self.calcLoop)
                self.timer.start(1000)  # 每100毫秒更新一次进度条
                '''

            case "Save":
                if not os.path.exists("Outputs/figures/" + self.fileName + "/process"):
                    os.makedirs("Outputs/figures/" + self.fileName + "/process")
                self.pro_data.draw_pseudoColorImg("Save", 2, self.ptColorMapType)
                if self.fileNum == 1:
                    QtWidgets.QMessageBox.about(self, "", "光合表型参数计算结果保存成功")

            case "View":
                self.pro_data.draw_pseudoColorImg("View", 2, self.ptColorMapType)
    '''
    def calcLoop(self):
        count = 0
        for i in range(self.plantPixNum):
            self.pro_data.CalcPhenotypeParas(i)
            count += 1
            if count == self.HSI_samples:
                print("count + 1")
                self.progress_value += 1
                count = 0
                self.progress_bar.setValue(self.progress_value)
                if (self.progress_value >=self.HSI_lines):
                    self.timer.stop()
                    print(len(self.pro_data.y_pre))

                    # Unlock the view and Save function
                    self.ptsthsViewBtn.setEnabled(True)
                    self.ptsthsSaveBtn.setEnabled(True)
                    QtWidgets.QMessageBox.about(self, "", "光合表型参数计算成功")
            #QApplication.processEvents()  # 更新 UI，防止界面冻结

    def closeEvent(self, event):
        # 在窗口关闭时停止循环
        #self.progress_bar.setValue(self.HSI_lines)
        self.timer.stop()
        event.accept()
    '''

    def outputAvgHsParas(self, function, idx):
        match function:
            case "Gene":
                reflect_info = [self.HSI_lines, self.HSI_channels, self.HSI_samples, self.reflect.ReflectMatrix, self.HSI_wavelengths, self.cur_proportion]
                #self.pro_data = HSIpack.pro.Process(reflect_info, self.Hs_Para, self.Ptsths_Para, self.Ptsths_Para_Model, self.plant_mask, self.fileName)
                self.pro_data.exportHsParas("Outputs/results/AvgHsPara.csv", idx)
                if self.fileNum == 1:
                    QtWidgets.QMessageBox.about(self, "", "一键计算结果保存成功")

    def outputAvgPtsthsParas(self, function, idx):
        match function:
            case "Gene":
                reflect_info = [self.HSI_lines, self.HSI_channels, self.HSI_samples, self.reflect.ReflectMatrix, self.HSI_wavelengths, self.cur_proportion]
                #self.pro_data = HSIpack.pro.Process(reflect_info, self.Hs_Para, self.Ptsths_Para, self.Ptsths_Para_Model, self.plant_mask, self.fileName)
                self.pro_data.exportPhenotypeParas("Outputs/results/AvgPtsthsPara.csv", idx)
                if self.fileNum == 1:
                    QtWidgets.QMessageBox.about(self, "", "一键计算结果保存成功")

    # one-cliked processing for multiple files
    def importRaws(self): 
        rawfile_names = []
        file_dialog = QFileDialog()
        self.selected_directory = file_dialog.getExistingDirectory(self, "选择文件夹")
        if self.selected_directory:
            rawfoleder_names = os.listdir(self.selected_directory)
            for i in range(len(rawfoleder_names)):
                #rawfile_names.append(item.replace("\\","/") for item in rawfile_names if item.endswith(".spe")) # only show the .spe file
                self.selected_directory = self.selected_directory.replace("\\","/")
                rawfile_names.append(rawfoleder_names[i] + ".spe")
                self.rawfile_paths = [self.selected_directory + "/" + rawfoleder_names[i] + "/" + rawfoleder_names[i] + ".spe" for i in range(len(rawfoleder_names))]   
                self.fileNum = len(self.rawfile_paths)
        
        # Bug remain here to do
        self.rawsLayout = QVBoxLayout(self.rawFilesWidget)
        self.rawsLayout.setContentsMargins(0, 0, 0, 0)  # Remove any margins

        for i in range(len(self.rawfile_paths)):
            text = rawfile_names[i]
            label = QLabel(text)
            label.setStyleSheet("border: none; font: 12pt 'Times New Roman';")
            label.setCursor(QtCore.Qt.PointingHandCursor)  # Set cursor to hand when hovering over the label
            label.mousePressEvent = lambda event, label=label: self.labelClicked(label)  # Connect the label's click event to the function
            self.rawsLayout.addWidget(label)

        self.rawsLayout.addStretch()  # Add stretchable space at the end

        self.RawFilesScrollArea.setWidgetResizable(True)
        
        self.multiFlag = 1

        self.multiGeneBtn.setEnabled(True)
        self.multiViewBtn.setEnabled(True)


    def labelClicked(self, label): 
        self.raw = label.text()
        self.rawSpeFile_path = self.selected_directory + "/" + self.raw
        self.rawHdrFile_path = self.rawSpeFile_path.replace(".spe",".hdr")

        # Refresh the widget background and Set the label background to the selected color
        for child in self.rawFilesWidget.children():
            if isinstance(child, QLabel):
                child.setStyleSheet("background-color: None; font: 12pt 'Agency FB'; border: None;") 
                            
        label.setStyleSheet("background-color: lightblue")
        #self.rawFilesWidget.setStyleSheet("background-color: transparent;")

    #Multiple files processing
    def multiProcess(self, function):
        match function:
            # Multiple files result generation
            case "Gene":
                if self.k == [] or self.b == []:
                    QtWidgets.QMessageBox.critical(self, "错误", "请先返回页面一进行反射率校正", QtWidgets.QMessageBox.Ok)
                else:
                    threadNum = len(self.rawfile_paths)
                    # Show the progress dialog    
                    '''
                    progress_dialog = QtWidgets.QProgressDialog(self)
                    progress_dialog.setModal(True)
                    progress_dialog.setWindowTitle("Processing")
                    progress_dialog.setLabelText("Processing files...")
                    progress_dialog.setMinimum(0)
                    progress_dialog.setMaximum(threadNum)
                    progress_dialog.show()
                    '''

                    for i in range(threadNum):
                        # get the raw data
                        self.rawSpeFile_path = self.rawfile_paths[i]
                        self.rawSpeFile_path = self.rawSpeFile_path.replace("\\","/")
                        #self.rawHSIPathlineEdit.setText(self.rawSpeFile_path)
                        self.rawHdrFile_path = self.rawSpeFile_path.replace(".spe",".hdr")

                        # get the file name
                        self.getRgb("Gene")
                        self.getRgb("Save")

                        # Level 0
                        if self.numOfAvg != 1:
                            pre_data = HSIpack.pre.Preprocess(self.HSI_info, self.NDVI_TH_LOW, self.NDVI_TH_HIGH, self.ampl_LowTH, self.ampl_HighTH, self.cur_proportion, self.plant_mask)
                            level0 = pre_data.getLevel0(self.numOfAvg)
                            self.HSI = level0 # Change the HSI_info into the averaging
                            self.HSI_info = [self.HSI_lines, self.HSI_channels, self.HSI_samples, self.HSI, self.HSI_wavelengths]

                        # get the preprocessed data
                        # Level 1
                        self.RmDb("Gene")
                        self.RmDb("Save")
                        # Level2
                        self.RmBg("Gene")
                        self.RmBg("Save")
                        self.getReflect("Gene")
                        self.getReflect("Save")

                        # get the processed data
                        # Output the figure
                        for j in range(len(self.Hs_Para_list)):
                            self.Hs_Para = self.Hs_Para_list[j]
                            self.getHsPara("Gene")
                            self.getHsPara("Save")
                        
                        # Bugs remains here
                        '''
                        for j in range(len(self.Ptsths_Para_list)):
                            self.Ptsths_Para = self.Ptsths_Para_list[j]
                            self.getPtsthsPara("Gene")
                            self.getPtsthsPara("Save")
                        '''
                        

                        # Output the result
                        self.outputAvgPtsthsParas("Gene", i+1)  # start from i = 1
                        self.outputAvgHsParas("Gene", i+1) # start from i = 1
                        
                        # Data re-initiailization
                        self.cur_proportion = 1

                        # Update the progress
                        #progress_dialog.setValue(i + 1)
                        #QtWidgets.QApplication.processEvents()  # Allow GUI updates

                    #progress_dialog.close()
                    QtWidgets.QMessageBox.about(self, "", "一键完成")
                    self.multiViewBtn.setEnabled(True)

            # To show the multiple files result 
            case "View":
                try:
                    current_folder = os.path.abspath(os.path.dirname(__file__))
                    output_folder = os.path.join(current_folder, "Outputs")
                    subprocess.run(['start', '', output_folder], shell=True)
                except:
                    QtWidgets.QMessageBox.about(self, "", "未检测到处理数据结果")

    def multiDelete(self):
        folder_path = "Outputs"
        try:
            shutil.rmtree(folder_path)
            msg = f"文件夹 {folder_path} 及其内容删除成功"
            QtWidgets.QMessageBox.about(self, "", msg)

        except OSError as e:
            msg = f"删除文件夹 {folder_path} 及其内容失败：{e}"
            QtWidgets.QMessageBox.about(self, "", msg)
    # ----------------------------Tab4-----------------------------
    # Tab page for model traing
    # To be finished...
    

class hsiRawView(QGraphicsView):
    def __init__(self, scene, brf_flag):
        super().__init__(scene)
        self.setDragMode(QGraphicsView.RubberBandDrag)
        self.selection_rect = None
        self.selecting = False
        self.BRF_flag = brf_flag

    def startSelection(self):
        self.selecting = True
        self.selection_rect = QGraphicsRectItem()
        if self.BRF_flag == "3":
            self.selection_rect.setPen(Qt.blue)
        if self.BRF_flag == "30":
            self.selection_rect.setPen(Qt.red)
        self.scene().addItem(self.selection_rect)

    def resetSelection(self):
        if self.selection_rect is not None:
            print("YES")
            self.scene().removeItem(self.selection_rect)
            self.selection_rect = None
        self.selecting = False
        self.update()

    def stopSelection(self):
        if self.selection_rect is not None:
            selected_items = self.scene().items(self.selection_rect.rect(), Qt.IntersectsItemShape)

            # print x and y
            rect = self.selection_rect.rect()

            if self.BRF_flag == "3":
                BRF3_x0 = int(rect.x())
                BRF3_y0 = int(rect.y())
                BRF3_x1 = int(BRF3_x0 + rect.width())
                BRF3_y1 = int(BRF3_y0 + rect.height())
                md.BRF3_pos_range = [[BRF3_x0,BRF3_y0],[BRF3_x1, BRF3_y1]]
                #print(md.BRF3_pos_range)          
            
            elif self.BRF_flag == "30":
                BRF30_x0 = int(rect.x())
                BRF30_y0 = int(rect.y())
                BRF30_x1 = int(BRF30_x0 + rect.width())
                BRF30_y1 = int(BRF30_y0 + rect.height())
                md.BRF30_pos_range = [[BRF30_x0,BRF30_y0],[BRF30_x1, BRF30_y1]]
                #print(md.BRF30_pos_range)
                
            #self.scene().removeItem(self.selection_rect)
            self.selection_rect = None
        self.selecting = False

    def mousePressEvent(self, event):
        if event.button() == Qt.LeftButton:
            self.resetSelection()
            self.startSelection()
            pos_in_view = event.pos()
            pos_in_scene = self.mapToScene(pos_in_view)
            self.selection_rect.setRect(QRectF(pos_in_scene, pos_in_scene))
            self.scene().addItem(self.selection_rect)

    def mouseMoveEvent(self, event):
        if self.selecting and self.selection_rect is not None:
            pos_in_view = event.pos()
            pos_in_scene = self.mapToScene(pos_in_view)
            rect = QRectF(self.selection_rect.rect().topLeft(), pos_in_scene)
            self.selection_rect.setRect(rect.normalized())

    def mouseReleaseEvent(self, event):
        if event.button() == Qt.LeftButton and self.selecting:
            self.stopSelection()

class HSCurve(QGraphicsView):
    def __init__(self, scene):
        super().__init__(scene)
        self.setMouseTracking(True)  # Turn on the mouse track
        self.cursor_pos = QPointF(0, 0) 

        self.crosshair_item = QGraphicsPathItem()
        self.crosshair_item.setPen(QPen(Qt.blue))
        self.scene().addItem(self.crosshair_item)

    def resizeEvent(self, event):
        super().resizeEvent(event)
        self.updateCrosshair()

    def mouseMoveEvent(self, event):
        self.cursor_pos = self.mapToScene(event.pos())
        #print(self.cursor_pos)
        self.updateCrosshair()

    def updateCrosshair(self):
        #view_width = self.viewport().width()
        #view_height = self.viewport().height()
        view_width = md.HSI_samples
        view_height = md.HSI_lines
        x = 0
        y = 0

        path = QPainterPath()
       
        if self.cursor_pos.x()>=0 and self.cursor_pos.x()<=view_width and self.cursor_pos.y()>=0 and self.cursor_pos.y()<=view_height:
            # Paint the cross cursor
            path.moveTo(self.cursor_pos.x(), 0)
            path.lineTo(self.cursor_pos.x(), view_height)
            path.moveTo(0, self.cursor_pos.y())
            path.lineTo(view_width, self.cursor_pos.y())
            
            self.crosshair_item.setPath(path)

    def mousePressEvent(self, event):
        if event.button() == Qt.LeftButton:
            x =  np.array(md.HSI_wavelengths)
            y = np.array(md.HSI[int(self.cursor_pos.y()),:,int(self.cursor_pos.x())])
            plt.xlabel("Wavelength(nm)")
            plt.ylabel("Hyperspectral Luminance")
            plt.plot(x, y, c='g', label='Curve_poly_Fit')
            plt.title("The Reflectance curve")

            plt.show()
    
    # delete the cross path after close the event
    def closeEvent(self, event):
        self.crosshair_item.setPath(QPainterPath())
    

class RFCurve(QGraphicsView):
    def __init__(self, scene):
        super().__init__(scene)
        self.setMouseTracking(True)  # Turn on the mouse track
        self.cursor_pos = QPointF(0, 0) 

        self.crosshair_item = QGraphicsPathItem()
        self.crosshair_item.setPen(QPen(Qt.blue))
        self.scene().addItem(self.crosshair_item)

    def resizeEvent(self, event):
        super().resizeEvent(event)
        self.updateCrosshair()

    def mouseMoveEvent(self, event):
        self.cursor_pos = self.mapToScene(event.pos())
        #print(self.cursor_pos)
        self.updateCrosshair()

    def updateCrosshair(self):
        #view_width = self.viewport().width()
        #view_height = self.viewport().height()
        view_width = md.HSI_samples
        view_height = md.HSI_lines
        x = 0
        y = 0

        path = QPainterPath()
       
        if self.cursor_pos.x()>=0 and self.cursor_pos.x()<=view_width and self.cursor_pos.y()>=0 and self.cursor_pos.y()<=view_height:
            # Paint the cross cursor
            path.moveTo(self.cursor_pos.x(), 0)
            path.lineTo(self.cursor_pos.x(), view_height)
            path.moveTo(0, self.cursor_pos.y())
            path.lineTo(view_width, self.cursor_pos.y())
            
            self.crosshair_item.setPath(path)

    def mousePressEvent(self, event):
        if event.button() == Qt.LeftButton:
            # Just show the HS with wavelength within 400nm - 990nm
            x =  np.array(md.HSI_wavelengths[2:-22])
            y = np.array(md.reflect.ReflectMatrix[int(self.cursor_pos.y()),2:-22,int(self.cursor_pos.x())])
            plt.xlabel("Wavelength(nm)")
            plt.ylabel("Reflectance")
    
            plt.plot(x,y,c='lightcoral',label='Curve_poly_Fit')
            plt.title("The Reflectance curve of the cross cursor point")
            plt.show()
    
    # delete the cross path after close the event   
    def closeEvent(self, event):
        self.crosshair_item.setPath(QPainterPath())


if __name__ == "__main__":
    app = QApplication(sys.argv)
    md = Main(QMainWindow)
    md.show()
    sys.exit(app.exec_())
            