
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow, QFileDialog, QGraphicsScene, QGraphicsPixmapItem
from PyQt5.QtGui import QPixmap, QImage

import sys
import os
import cv2
import matplotlib.pyplot as plt

from MainWindow import Ui_MainWindow
import ReadData
import RemoveBG
import RemoveDB



class Main(QMainWindow, Ui_MainWindow):
    settings = QtCore.QSettings("config.ini",
                            QtCore.QSettings.Format.IniFormat)
    
    ######----------------------------------------------------------------------------------------------------######
    #####----------------------------------Parameters definition start here------------------------------------#####
    ####--------------------------------------------------------------------------------------------------------####

    impFileNum = 0
    # in Windows: C:\...\... while in linux C:/.../...
    rawSpeFile_path = "" # The abs path of the raw spe file
    rawHdrFile_path = "" # The abs path of the raw hdr file
    rawsSpeFile_path = "" # The abs path of the raw spe files
    rawsHdrFile_path = "" # The abs path of the raw hdr files
    BRFSpeFile_path = "" # The abs path of the reference board spe file
    BRFHdrFile_path = "" # The abs path of the reference board hdr file

    # Data for single Hyperspectra image
    raw_HSI_info = []
    HSI_length = 0 # Default length value
    HSI_width = 0 # Default width value
    HSI_wl = 300 # Default wavelength value
    HSI = [[[]]] # 3-D HSI img
    wavelength = [] # ranging from apporximately 400nm to 1000nm

    # Data for reference board image
    BRF_HSI_info = []

    # rbg Image generated by the three bands of HSI
    rgbImg = []

    # NDVI_matrix
    NDVI = []

    # Threshold value of NDVI to seperate the plant from the background
    NDVI_TH = 0

    # Threshold value of amplititude of the hyperspectra to eliminate
    ampl_LowTH = 0
    ampl_HighTH = 4095
    

    ###-------------------------------------------The End line---------------------------------------------------###


    ######----------------------------------------------------------------------------------------------------######
    #####-------------------------------------_init_ Function start here---------------------------------------#####
    ####--------------------------------------------------------------------------------------------------------####
    def __init__(self, QMainWindow):
        QMainWindow.__init__(self)
        Ui_MainWindow.__init__(self)
        self.setupUi(self)
        # ------------------------------------Tab1------------------------------------
        # Part 1. Show the raw data
        # Import the single raw HSI file
        self.impRawBtn.clicked.connect(self.importRaw)
        self.impRawBtn.setGeometry(50, 50, 200, 30)

        # Import the multiples raw HSI files
        self.impRawsBtn.clicked.connect(self.importRaws)

        # Import the BRF HSI files
        self.impBRFImgBtn.clicked.connect(self.importBRFImg)
        
        # Mouse box selection
        self.selectBoxBtn.clicked.connect(self.selectBox)

        # Read the raw file
        self.rgbGeneBtn.clicked.connect(lambda:self.getRgb("Gene"))
        # show the raw file
        self.rgbViewBtn.clicked.connect(lambda:self.getRgb("View"))
        # Save the raw rgb file
        self.rgbSaveBtn.clicked.connect(lambda:self.getRgb("Save"))

        self.showHsiInfoBtn.clicked.connect(self.showHsiInfo)

        # ------------------------------------Tab2------------------------------------
        # Part 2. Data Pre-processing
        # Handle Selection Changed
        self.bgParaDb.currentIndexChanged.connect(lambda: self.getPreProcessPara(1))
        self.amplLowThDb.currentIndexChanged.connect(lambda: self.getPreProcessPara(2))
        self.amplHighThDb.currentIndexChanged.connect(lambda: self.getPreProcessPara(3))

        # Level 1-2 pre-processing
        self.RmBgGeneBtn.clicked.connect(lambda: self.RmBg("Gene"))
        self.RmBgViewBtn.clicked.connect(lambda: self.RmBg("View"))
        self.RmBgSaveBtn.clicked.connect(lambda: self.RmBg("Save"))

        self.RmSdGeneBtn.clicked.connect(lambda: self.RmDb("Gene", "SD"))
        self.RmSdViewBtn.clicked.connect(lambda: self.RmDb("View", "SD"))
        self.RmSdSaveBtn.clicked.connect(lambda: self.RmDb("Save", "SD"))

        self.RmBtGeneBtn.clicked.connect(lambda: self.RmDb("Gene", "BT"))
        self.RmBtViewBtn.clicked.connect(lambda: self.RmDb("View", "BT"))
        self.RmBtSaveBtn.clicked.connect(lambda: self.RmDb("Save", "BT"))

        # Get the reflectance
        self.RefGeneBtn.clicked.connect(lambda: self.Ref("Gene"))
        self.RefViewBtn.clicked.connect(lambda: self.Ref("View"))
        self.RefSaveBtn.clicked.connect(lambda: self.Ref("Save"))

    ######----------------------------------------------------------------------------------------------------######
    #####-------------------------------------Helper Function start here---------------------------------------#####
    ####--------------------------------------------------------------------------------------------------------####
    # ------------------------------------Tab1------------------------------------
    def importRaw(self):
        file_dialog = QFileDialog()
        selected_file, _ = file_dialog.getOpenFileName(QMainWindow(), '选择文件', '', '.spe(*.spe*)')
        if selected_file:
            self.rawSpeFile_path = selected_file
            self.rawSpeFile_path = self.rawSpeFile_path.replace("\\","/")
            self.rawHSIPathlineEdit.setText(self.rawSpeFile_path)
            
            self.rawHdrFile_path = self.rawSpeFile_path.replace(".spe",".hdr")
            self.impFileNum += 1

    def importRaws(self):  
        file_dialog = QFileDialog()
        # Select file/files according to the flag 
        selected_directory = file_dialog.getExistingDirectory(self, "选择文件夹")
        if selected_directory:
            file_names = os.listdir(selected_directory)
            print(file_names)
        

    def importBRFImg(self):
        selected_file, _ = QFileDialog.getOpenFileName(QMainWindow(), '选择文件', '', '.spe(*.spe*)')
        if selected_file:
            self.BRFSpeFile_path = selected_file
            self.BRFSpeFile_path = self.rawSpeFile_path.replace("\\","/")
            self.BRFPathlineEdit.setText(self.rawSpeFile_path)
            
            self.BRFHdrFile_path = self.rawSpeFile_path.replace(".spe",".hdr")
            self.BRF_HSI_info = ReadData.ReadData(self.BRFHdrFile_path,self.BRFSpeFile_path, 1)
        return
    
    def selectBox(self):
        
        return

    def getRgb(self, function):
        match function:
            case "Gene":
                self.HSI_info = ReadData.ReadData(self.rawHdrFile_path,self.rawSpeFile_path, 1)
                self.HSI_length = self.HSI_info[0]
                self.HSI_wl = self.HSI_info[1]
                self.HSI_width = self.HSI_info[2]
                self.HSI = self.HSI_info[3]
                self.wavelength = self.HSI_info[4]
                # Unlock the view and Save function
                self.rgbViewBtn.setEnabled(True)
                self.rgbSaveBtn.setEnabled(True)
                QtWidgets.QMessageBox.about(self, "", "高光谱原始数据处理成功")

            case "View":
                if self.rawSpeFile_path != "":                     
                    self.rawjpgFile_path = "figures/test/raw" + str(self.impFileNum) + ".jpg"
                    frame = QImage(self.rawjpgFile_path)
                    pix = QPixmap.fromImage(frame)
                    item = QGraphicsPixmapItem(pix)
                    scene = QGraphicsScene()
                    scene.addItem(item)
                    self.hsiRawView.setScene(scene)
                    '''
                    self.rgbImg = ReadData.drawImg(self.HSI_info)
                    self.rgbImg.show()
                    '''
            case "Save":
                if self.rawSpeFile_path != "":
                    self.rgbImg = ReadData.drawImg(self.HSI_info)
                    self.rgbImg.save("figures/test/raw" + str(self.impFileNum) + ".jpg")
                    QtWidgets.QMessageBox.about(self, "", "高光谱可视化数据保存成功")


    def showHsiInfo(self):
        self.lenShowBtn.setText(str(self.HSI_length)+" pix")
        self.widthShowBtn.setText(str(self.HSI_width)+" pix")
        self.wlShowBtn.setText(str(self.HSI_wl)+" bands")

    # ------------------------------------Tab2------------------------------------
    def getPreProcessPara(self, index):
        combo_box = self.sender()
        match index:
            case 1:
                self.NDVI_TH = combo_box.currentText()
            case 2:
                self.ampl_LowTH = combo_box.currentText()
            case 3:
                self.ampl_HighTH = combo_box.currentText()

    # Remove the background by NDVI
    def RmBg(self, function):
        match function:        
            case "Gene":
                l1 = RemoveBG.level1(self.HSI_info, self.NDVI_TH)
                level1 = l1.getLevel1()
                self.HSI_info = level1[0]
                self.cur_proportion = level1[2]
                self.NDVI = level1[3]
                # Unlock the view and Save function
                self.RmBgViewBtn.setEnabled(True)
                self.RmBgSaveBtn.setEnabled(True)

            case "View":
                fig, ax = plt.subplots(figsize=(6, 8))
                im = ax.imshow(self.NDVI, cmap='gray',interpolation='nearest')
                ax.set_title("Pseudo_Color Map of the Relative Values on NDVI", y=1.05)
                fig.colorbar(im)
                plt.show()
                
            case "Save":
                fig, ax = plt.subplots(figsize=(6, 8))
                im = ax.imshow(self.NDVI, cmap='gray',interpolation='nearest')
                ax.set_title("Pseudo_Color Map of the Relative Values on NDVI", y=1.05)
                fig.colorbar(im)
                fig.savefig("figures/test/pre_process/" + str(self.impFileNum) + "_level1.jpg")
                
    
    # Remove the too bright and to dark img
    def RmDb(self, function, RmType):
        match RmType:
            # To remove the shadow
            case "SD":
                match function:
                    case "Gene":
                        level2_1 = RemoveDB.RemoveDB(self.HSI_info, [0,0,0], self.cur_proportion, "SD")
                        self.HSI_info = level2_1[0]
                        self.cur_proportion = level2_1[3]
                        # Unlock the view and Save function
                        self.RmSdViewBtn.setEnabled(True)
                        self.RmSdSaveBtn.setEnabled(True)
                    case "View":
                        # Consider to draw persudo color map here!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1
                        l1_rgbImg = ReadData.drawImg(self.HSI_info)
                        l1_rgbImg.show()
                    case "Save":
                        l1_rgbImg.save("figures/test/pre_process/"+ self.impFileNum +"_level2_1.jpg")
                        # Save 

            # To remove the bright
            case "BT":
                match function:
                    case "Gene":
                        level2_1 = RemoveDB.RemoveDB(self.HSI_info, [0,0,0], self.cur_proportion, "BT")
                        self.HSI_info = level2_1[0]
                        self.cur_proportion = level2_1[3]
                        # Unlock the view and Save function
                        self.RmBtViewBtn.setEnabled(True)
                        self.RmBtSaveBtn.setEnabled(True)
                    case "View":
                        # Consider to draw persudo color map here!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1
                        l1_rgbImg = ReadData.drawImg(self.HSI_info)
                        l1_rgbImg.show()
                    case "Save":
                        l1_rgbImg.save("figures/test/pre_process/"+ self.impFileNum +"_level2_2.jpg")




    # ----------------------------Tab3-----------------------------


    # ----------------------------Tab4-----------------------------


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    md = Main(QMainWindow)
    md.show()
    sys.exit(app.exec_())
            



